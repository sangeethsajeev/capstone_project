AWSTemplateFormatVersion: '2010-09-09'
Description: Template to create IoT Resources

Resources:
  GreengrassGroupCoreThing:
    Type: AWS::IoT::Thing
    Properties:
      ThingName:
        Fn::Join:
        - ''
        - - Ref: AWS::StackName
          - GreengrassGroupCore

  IotEventDetectorModelRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - iotevents.amazonaws.com
        Version: '2012-10-17'
      Path: "/"
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - iot:Publish
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - |-
                - "arn:aws:iot:"
                - "Ref": "AWS::Region"
                - ":"
                - "Ref": "AWS::AccountId"
                - ":"
                - "topic/"
                - "pollution/data/model/accuracy"
          Version: '2012-10-17'
        PolicyName: iotMqttPublish

  IoTEventsDetectorModel:
    Type: AWS::IoTEvents::DetectorModel
    Properties:
      DetectorModelDefinition:
        InitialStateName: ModelAccurate
        States:
        - OnEnter:
            Events:
            - Actions:
              - SetVariable:
                  Value: 0
                  VariableName: Count
              - SetVariable:
                  Value: 0
                  VariableName: IncorrectPredictions
              EventName: InitializeVariable
          OnInput:
            Events:
            - Actions:
              - SetVariable:
                  Value: "$variable.Count + 1"
                  VariableName: Count
              EventName: IncrementCount
            - Actions:
              - SetVariable:
                  Value: "$variable.IncorrectPredictions + 1"
                  VariableName: IncorrectPredictions
              Condition:
                Fn::Sub: "(((1.0*$input.${IoTEventsInput}.predicted_pollution - $input.${IoTEventsInput}.actual_pollution)/$input.${IoTEventsInput}.actual_pollution)
                  > 0.1) || (((1.0*$input.${IoTEventsInput}.predicted_pollution -
                  $input.${IoTEventsInput}.actual_pollution)/$input.${IoTEventsInput}.actual_pollution)
                  < -0.1)"
              EventName: IncorrectPrediction
            - Actions:
              - SetVariable:
                  Value: "$variable.IncorrectPredictions - 1"
                  VariableName: IncorrectPredictions
              Condition:
                Fn::Sub: "(((1.0*$input.${IoTEventsInput}.predicted_pollution - $input.${IoTEventsInput}.actual_pollution)/$input.${IoTEventsInput}.actual_pollution)
                  <= 0.1) && (((1.0*$input.${IoTEventsInput}.predicted_pollution -
                  $input.${IoTEventsInput}.actual_pollution)/$input.${IoTEventsInput}.actual_pollution)
                  >= -0.1)"
              EventName: CorrectPrediction
            TransitionEvents:
            - Condition: "(1.0*$variable.IncorrectPredictions)/$variable.Count > 0.10
                && $variable.Count > 5"
              EventName: TransitionToInaccurateModel
              NextState: ModelInAccurate
          StateName: ModelAccurate
        - OnEnter:
            Events:
            - Actions:
              - IotTopicPublish:
                  MqttTopic: pollution/data/model/accuracy
              EventName: SendMqttMessage
          OnInput:
            Events:
            - Actions:
              - SetVariable:
                  Value: "$variable.Count + 1"
                  VariableName: Count
              EventName: IncrementCount
            - Actions:
              - SetVariable:
                  Value: "$variable.IncorrectPredictions + 1"
                  VariableName: IncorrectPredictions
              Condition:
                Fn::Sub: "(((1.0*$input.${IoTEventsInput}.predicted_pollution - $input.${IoTEventsInput}.actual_pollution)/$input.${IoTEventsInput}.actual_pollution)
                  > 0.1) || (((1.0*$input.${IoTEventsInput}.predicted_pollution -
                  $input.${IoTEventsInput}.actual_pollution)/$input.${IoTEventsInput}.actual_pollution)
                  < -0.1)"
              EventName: IncorrectPrediction
            - Actions:
              - SetVariable:
                  Value: "$variable.IncorrectPredictions - 1"
                  VariableName: IncorrectPredictions
              Condition:
                Fn::Sub: "(((1.0*$input.${IoTEventsInput}.predicted_pollution - $input.${IoTEventsInput}.actual_pollution)/$input.${IoTEventsInput}.actual_pollution)
                  <= 0.1) && (((1.0*$input.${IoTEventsInput}.predicted_pollution -
                  $input.${IoTEventsInput}.actual_pollution)/$input.${IoTEventsInput}.actual_pollution)
                  >= -0.1)"
              EventName: CorrectPrediction
            TransitionEvents:
            - Condition: "(1.0*$variable.IncorrectPredictions)/$variable.Count < 0.10
                && $variable.Count > 5"
              EventName: TransitionToAccurateModel
              NextState: ModelAccurate
          StateName: ModelInAccurate
      RoleArn:
        Fn::GetAtt:
        - IotEventDetectorModelRole
        - Arn
      Tags:
      - Key: StackName
        Value:
          Ref: AWS::StackName

  IoTEventsInput:
    Type: AWS::IoTEvents::Input
    Properties:
      InputDefinition:
        Attributes:
        - JsonPath: predicted_pollution
        - JsonPath: actual_pollution
      Tags:
      - Key: StackName
        Value:
          Ref: AWS::StackName

  IotAnalyticsChannel:
    Type: AWS::IoTAnalytics::Channel
    Properties:
      Tags:
      - Key: StackName
        Value:
          Ref: AWS::StackName

  IotAnalyticsDatastore:
    Type: AWS::IoTAnalytics::Datastore
    Properties:
      Tags:
      - Key: StackName
        Value:
          Ref: AWS::StackName

  IotAnalyticsPipeline:
    Type: AWS::IoTAnalytics::Pipeline
    Properties:
      PipelineActivities:
      - Channel:
          ChannelName:
            Ref: IotAnalyticsChannel
          Name: ChannelActivity
          Next: DatastoreActivity
        Datastore:
          DatastoreName:
            Ref: IotAnalyticsDatastore
          Name: DatastoreActivity
      Tags:
      - Key: StackName
        Value:
          Ref: AWS::StackName

  IotAnalyticsSqlDataset:
    Type: AWS::IoTAnalytics::Dataset
    Properties:
      Actions:
      - ActionName: SqlAction
        QueryAction:
          SqlQuery:
            Fn::Join:
            - ''
            - |-
              - "SELECT * FROM "
              - "Ref": "IotAnalyticsDatastore"
      Tags:
      - Key: StackName
        Value:
          Ref: AWS::StackName

  IotEventsTopicRuleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - iot.amazonaws.com
        Version: '2012-10-17'
      Path: "/"
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - iotevents:BatchPutMessage
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - |-
                - "arn:aws:iotevents:"
                - "Ref": "AWS::Region"
                - ":"
                - "Ref": "AWS::AccountId"
                - ":"
                - "input/"
                - "Ref": "IoTEventsInput"
          Version: '2012-10-17'
        PolicyName: IotEventsTopicRuleRoleInlinePolicy

  IotEventsTopicRule:
    Type: Custom::TopicRuleIotEvents
    Properties:
      InputName:
        Ref: IoTEventsInput
      RoleArn:
        Fn::GetAtt:
        - IotEventsTopicRuleRole
        - Arn
      RuleName:
        Fn::Join:
        - ''
        - - Ref: AWS::StackName
          - IotEventsTopicRule
      ServiceToken:
        Fn::GetAtt:
        - TopicRuleIotEventsFunction
        - Arn
      TopicDescription: Sending inference to iot events for model monitoring
      TopicSql: SELECT * FROM 'pollution/data/infer'

  IotRuleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - iot.amazonaws.com
        Version: '2012-10-17'
      Path: "/"
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - iotanalytics:BatchPutMessage
            Effect: Allow
            Resource:
              Fn::Join:
              - ''
              - |-
                - "arn:aws:iotanalytics:"
                - "Ref": "AWS::Region"
                - ":"
                - "Ref": "AWS::AccountId"
                - ":"
                - "channel/"
                - "Ref": "IotAnalyticsChannel"
          Version: '2012-10-17'
        PolicyName: IotRuleRoleInlinePolicy
    
  IotTopicRule:
    Type: AWS::IoT::TopicRule
    Properties:
      TopicRulePayload:
        Actions:
        - IotAnalytics:
            ChannelName:
              Ref: IotAnalyticsChannel
            RoleArn:
              Fn::GetAtt:
              - IotRuleRole
              - Arn
        RuleDisabled: true
        Sql: SELECT * FROM 'pollution/data'
    
  ThingPrincipalAttachment:
    Type: AWS::IoT::ThingPrincipalAttachment
    Properties:
      Principal:
        Fn::GetAtt:
        - IotCertificateKey
        - Arn
      ThingName:
        Ref: GreengrassGroupCoreThing
        
  TopicRuleIotEventsFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: "/"
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - iot:CreateTopicRule
            - iot:DeleteTopicRule
            Effect: Allow
            Resource: "*"
          - Action:
            - iam:PassRole
            Effect: Allow
            Resource:
              Fn::GetAtt:
              - IotEventsTopicRuleRole
              - Arn
          Version: '2012-10-17'
        PolicyName: createIotTopicRule
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          Version: '2012-10-17'
        PolicyName: cloudwatchLogging

  TopicRuleIotEventsFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |-
          import boto3
          import cfnresponse


          iotClient = boto3.client('iot')

          def createTopicRule(ruleName, topicSql, topicDescription, inputName, roleArn):
            response = iotClient.create_topic_rule(
                ruleName=ruleName,
                topicRulePayload={
                    'sql': topicSql,
                    'description': topicDescription,
                    'actions': [
                        {
                            'iotEvents': {
                                'inputName': inputName,
                                'roleArn': roleArn
                            }
                        },
                    ],
                    'ruleDisabled': False
                }
            )

          def deleteTopicRule(ruleName):
            response = iotClient.delete_topic_rule(
              ruleName=ruleName
            )

          def handler(event, context):
              ruleName = event['ResourceProperties']['RuleName']
              topicSql = event['ResourceProperties']['TopicSql']
              topicDescription = event['ResourceProperties']['TopicDescription']
              inputName = event['ResourceProperties']['InputName']
              roleArn = event['ResourceProperties']['RoleArn']

              if event['RequestType'] == 'Delete':
                try:
                  deleteTopicRule(ruleName)
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                except Exception as ex:
                  print(ex)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {})
              else:
                physicalResourceId = ruleName
                try:
                  createTopicRule(ruleName, topicSql, topicDescription, inputName, roleArn)
                  response_data = {}
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physicalResourceId)
                except Exception as ex:
                  print(ex)
                  cfnresponse.send(event, context, cfnresponse.FAILED, {}, physicalResourceId)
      Description: Create Topic Rule for Iot Events
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - TopicRuleIotEventsFunctionRole
        - Arn
      Runtime: python3.6
      Timeout: 300

Outputs:
  StackArn:
    Value:
      Ref: AWS::StackId
